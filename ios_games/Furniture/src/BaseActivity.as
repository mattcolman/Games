package{	import com.greensock.events.*;	import com.greensock.loading.*;		import flash.display.*;	import flash.events.*;	import flash.net.*;
		// Base Activity will load up all assets and supply you with findAsset methods to use them.		public class BaseActivity extends MovieClip	{		public var contentArray:Object = {images: new Object(), audio:new Object(), movies:new Object(), variables:new Object()};		public var loadingQueue:LoaderMax;		public var curLoader:Object = new Object;		private var _jsonData:Object;		public var verbose:Boolean = true;		public function BaseActivity()		{			loadJSON('furniture');		}				public function init():void {			trace("init");		}				private function loadJSON(path:String):void {					var filename:String = path + ".json";			var jsonLoader:URLLoader = new URLLoader();			jsonLoader.addEventListener(Event.COMPLETE, jsonLoaded);			jsonLoader.addEventListener(IOErrorEvent.IO_ERROR, jsonLoadError);			jsonLoader.load(new URLRequest(filename));		}				private function jsonLoadError(e:Event):void{			trace("ERROR: json file");		}				private function jsonLoaded(e:Event):void{			trace("JSONLoader:SUCCESS:  " + e.target.data);			var jsonData:Object = JSON.parse(e.target.data);			loadAssets(jsonData);		}				public function findImage(n:String, c:DisplayObjectContainer = null, w:Number = 0, h:Number = 0, loadNow:Boolean = true):Object {			return(findAsset(n, "images", c, w, h, loadNow));		}				public function findVariable(n:String):Object {			return(findAsset(n, "variables"));		}				public function findAsset(assetName:String, assetType:String, c:DisplayObjectContainer = null, w:Number = 0, h:Number = 0, loadNow:Boolean = true):Object{			trace("ContentLoader: findAsset(\""+assetName+"\", \""+assetType+"\") called");			var i:Object;			var value:String;			var name:String;			var tempObject:Object = new Object();			tempObject.name = "loading";			switch(assetType){				case "images":					for (i in contentArray[assetType]){						if (new RegExp("^" + assetName + "$").test(String(i))) {							if (contentArray.images[i] is String) {								if (verbose) trace("ContentLoader: Image isn't loaded yet. Starting load of \""+assetName+"\"...");								value = contentArray.images[i];								name = distillName(value);								loadSingleAsset(assetType, null, value, null, c, w, h);								if (loadNow) {									LoaderMax.prioritize(name);									loadingQueue.load();								}															return tempObject;							} else {								return contentArray[assetType][i];							}						}					}					break;				case "audio":					for (i in contentArray[assetType]){						if (new RegExp("^" + assetName + "$").test(String(i))) {							if (contentArray.audio[i] is String) {								if (verbose) trace("ContentLoader: Audio isn't loaded yet. Starting load of \""+assetName+"\"...");								value = contentArray.audio[i];								name = distillName(value);								loadSingleAsset(assetType, null, value, null, c, w, h);								if (loadNow) {									LoaderMax.prioritize(name);									loadingQueue.load();								}												return null;							} else {								return contentArray[assetType][i];							}						}					}				case "variables":					for (i in contentArray[assetType]){						trace('var', i);						if (new RegExp("^" + assetName + "$").test(String(i))) {							return contentArray[assetType][i];						}					}					break;			}			if (verbose) trace("ContentLoader: Could not find asset " + assetName + " Either the asset type is not movies, audio, images or variables...OR the name is not found in the contentArray.");			return null;		}				public function loadAssets(jsonData:Object):void{			var preloadAssetTypes:Array = ["images", "audio", "variables"];			if (verbose) trace("ContentLoader: loading assets "+preloadAssetTypes);			loadingQueue = new LoaderMax({name:"mainQueue"});			for (var assetType:String in jsonData) {								// This asset type isn't set for preloading, so set it's value to be the url of the asset for loading later.				for (var key:String in jsonData[assetType]){					if (assetType == "variables") {						loadSingleAsset(assetType, key, jsonData[assetType][key], jsonData);						continue;					}					var distilledName:String = distillName(jsonData[assetType][key]);																				contentArray[assetType][distilledName] = jsonData[assetType][key];				}			}			trace("content array created");			trace(JSON.stringify(contentArray));			var contentCopy:Object = contentArray;			trace('find items', findVariable('items'));			init();		}			private function loadSingleAsset(assetType:String, key:String, value:Object, jsonData:Object, c:DisplayObjectContainer = null, w:Number = 0, h:Number = 0):void {			if (verbose) trace("loadSingleAsset(\""+assetType+"\", \""+key+"\", "+value+", "+jsonData+")");			var distilledName:String = distillName(value.toString());			switch (assetType) {				case "images":								var imgLoader:ImageLoader = new ImageLoader(value, {name:distilledName, container: c, width: w, height: h, estimatedBytes:20000, autoDispose: false, noCache:false, onProgress:indProgressHandler, onComplete:indCompleteHandler, onError:indErrorHandler});					loadingQueue.append(imgLoader);					break;				case "audio":					var mp3LoaderInst:MP3Loader = new MP3Loader(value, {name:distilledName, autoDispose: false, noCache:false, onProgress:indProgressHandler, onComplete:indCompleteHandler, onError:indErrorHandler}) ;					loadingQueue.append(mp3LoaderInst);					break;				case "variables":					contentArray.variables[key] = jsonData[assetType][key];					break;			}		}				public function indProgressHandler(e:LoaderEvent):void{			curLoader = Object(e.target);		}				public function indErrorHandler(e:LoaderEvent):void{ 				trace("Individual error occured with " + e.target + ": " + e.text,this,true);			curLoader = Object(e.target);		}				public function indCompleteHandler(e:LoaderEvent):void {			curLoader = Object(e.target);			trace("ContentLoader: Finished loading " + curLoader);			switch (String((curLoader).constructor)){				case "[class ImageLoader]":					contentArray.images[curLoader.name] = curLoader.content;					trace("container = " + contentArray.images[curLoader.name]);								break;				case "[class MP3Loader]":					contentArray.audio[curLoader.name] = curLoader.content;					break;				default:			}		}				public function distillName(n:String):String{			var nameSplit:Array = n.split("/");			var distilledName:String = (nameSplit[nameSplit.length-1]);			distilledName = distilledName.split(".")[0];			if (distilledName.search("-fp-") > -1) distilledName = distilledName.slice(0, distilledName.search("-fp-"));			if (distilledName.search(/_[au|uk|us]+\b/) > -1) distilledName = distilledName.slice(0, distilledName.search(/_[au|uk|us]+\b/));			return distilledName;		}	}}