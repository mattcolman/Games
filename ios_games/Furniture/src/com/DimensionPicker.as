/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package com{	import com.danielfreeman.madcomponents.*;	import com.greensock.TweenMax;	import com.greensock.easing.*;		import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;
		public class DimensionPicker extends Sprite {		public var _value:Number;		public var _window:Sprite;		private var _parent:DisplayObjectContainer;			    protected static const NUMBERS:XML = <data>	    									<item label="0"/>											<item label="1"/>											<item label="2"/>											<item label="3"/>											<item label="4"/>											<item label="5"/>											<item label="6"/>											<item label="7"/>											<item label="8"/>											<item label="9"/>										 </data>;														        protected static const POPUP_WINDOW:XML = <vertical alignH="fill">                                                    <label id="player"><font color="#000000"/>Enter width in centimeters (cm)</label>        											<columns gapH="0">        												<picker id="picker1" index="0" background="#FFFFEE">        													{NUMBERS}        												</picker>        												<picker id="picker2" index="0" background="#EEEEFF">        													{NUMBERS}        												</picker>        												<picker id="picker3" index="0" background="#EEEEFF">        													{NUMBERS}        												</picker>        											</columns>        											<columns>        												<button colour="#669966" id="cancel">cancel</button>        												<button colour="#996666" id="ok">ok</button>        											</columns>        										</vertical>;					public function DimensionPicker(screen:MovieClip, w:Number, h:Number) {			trace("create picker view");			if (screen)				_parent = screen;				screen.addChild(this);						_window = UI.create(this, POPUP_WINDOW, w, h);			//Listener for OK btn			var ok:UIButton = UIButton(UI.findViewById("ok"));			ok.addEventListener(UIButton.CLICKED, handleClick);			var cancel:UIButton = UIButton(UI.findViewById("cancel"));			cancel.addEventListener(UIButton.CLICKED, handleClick);		}				private function handleClick(e:Event):void {			e.target.removeEventListener(UIButton.CLICKED, handleClick);			switch(e.target.name)
			{
				case "ok":
					var hundreds:UIPicker = UIPicker(UI.findViewById("picker1"));					var tens:UIPicker = UIPicker(UI.findViewById("picker2"));					var ones:UIPicker = UIPicker(UI.findViewById("picker3"));					_value = hundreds.index*100 + tens.index*10 + ones.index;					this.dispatchEvent(new Event('ok_clicked', false, false));
					break;				case "cancel":					this.dispatchEvent(new Event('cancel_clicked', false, false));
			}		}				public function removeMe():void {			var ok:UIButton = UIButton(UI.findViewById("ok"));			ok.destructor();			var cancel:UIButton = UIButton(UI.findViewById("cancel"));			cancel.destructor();			var hundreds:UIPicker = UIPicker(UI.findViewById("picker1"));			hundreds.destructor();			var tens:UIPicker = UIPicker(UI.findViewById("picker2"));			tens.destructor();			var ones:UIPicker = UIPicker(UI.findViewById("picker3"));			ones.destructor();			//_window.parent.removeChild(_window);		}	}}